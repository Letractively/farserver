<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" >
	<fx:Script>
		<![CDATA[
			import com.fx.ConfigService;
			import com.fx.ConfigUtils;
			import com.fx.FileService;
			import com.fx.GridFile;
			import com.fx.NotesService;
			import com.fx.ServiceRegistry;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.listClasses.TileListItemRenderer;
			import mx.core.UITextField;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			
			var xmm:XML = 
				<vssmenu label="all" data="root">
				 <menuitem label="VSS权限查询" data="top">
				  <menuitem label="按目录查询" data="findauthoritybycontent"/>
				  <menuitem label="按人员查询" data="findauthoritybyperson"/>
				 </menuitem>
				 <menuitem label="VSS授权管理" data="manage">
				 </menuitem>
				 <menuitem label="VSS授权记录" data="top">
				  <menuitem label="按目录查询" data="findrecordbycontent"/>
				  <menuitem label="按人员查询" data="findrecordbyperson"/>
				 </menuitem>
				 
				 <menuitem label="编译打包" data="top">
				  <menuitem label="编译权限管理" data="packagegive"/>
				  <menuitem label="编译记录查询" data="findresult"/>
				 </menuitem>
				</vssmenu>
			

				
			var serviceRegistry:ServiceRegistry = new ServiceRegistry();
			var configService:ConfigService = new ConfigService();
			var fileService:FileService = new FileService(configService);
			var notesService:NotesService = new NotesService(configService, null);
			
			
			protected function myTree_clickHandler(event:MouseEvent):void
			{
				var target:Object = event.target;
				if (target is UITextField) {
					var text:UITextField = target as UITextField;
					
					if (text.text=="每日文件") {
						viewstack.selectedChild = navcontent_everyday_file;
						return;
					} 
					if (text.text=="常用文件") {
						viewstack.selectedChild = navcontent_useful_file;
						return;
					} 
					
					if (text.text=="列表") {
						viewstack.selectedChild = navcontent_notes;
						return;
					} 
					
				}
			}

			
			protected function textinput1_clickHandler(event:MouseEvent):void {

				var f:File = File.desktopDirectory;
				f.browseForDirectory("选择目录");
				
				f.addEventListener(Event.SELECT, function (event:Event):void {
					var dir:File = event.target as File;
					fileService.organizeFolder(dir);
					ConfigUtils.writeProp("basePath",dir.nativePath);
					fileService.init(new File(cfg_basePath.text));	
				});
			}
			

			protected function button1_clickHandler(event:MouseEvent):void
			{
				if (list_days.verticalScrollPosition>0) {
					list_days.verticalScrollPosition --;
				}
			}


			protected function button2_clickHandler(event:MouseEvent):void
			{
				list_days.verticalScrollPosition ++;
			}
			
			protected function list_days_clickHandler(event:MouseEvent):void
			{
				var target:Object = event.target;
				if (target is UITextField) {
					var ir:TileListItemRenderer = target.parent as TileListItemRenderer;
					
					var arraylist:ArrayList = fileService.getDateFileList(ir.data["path"]);
					
					datagrid_file_list_view.dataProvider = arraylist;
				}
			}

			protected function button3_clickHandler(event:MouseEvent):void
			{
				fileService.organizeFolder(new File(cfg_basePath.text));
				fileService.init(new File(cfg_basePath.text));	
			}


			protected function datagrid_file_list_view_doubleClickHandler(event:MouseEvent):void
			{
				var target:Object = event.target;
				var i:int = datagrid_file_list_view.selectedIndex;
				var item:GridFile = datagrid_file_list_view.dataProvider.getItemAt(i) as GridFile;
				
				item.file.openWithDefaultApplication();
			}
			
			
			//常用文件列表的双击事件
			protected function datagrid_useful_file_list_view_doubleClickHandler(event:MouseEvent):void
			{
				if (datagrid_useful_file_list_view.selectedItem!=null) {
					var item:GridFile = datagrid_useful_file_list_view.selectedItem as GridFile;
					item.file.openWithDefaultApplication();
				}
			}
			

			protected function list_days_initializeHandler(event:FlexEvent):void
			{
				list_days.dataProvider = new ArrayCollection(fileService.getDays());
				list_days.verticalScrollPosition = fileService.getDays().length-1;
				
				//dataProvider="{new ArrayCollection(fileService.getDays())}"
			}
			
			private var fileOperations:Array=["删除","复制到今天","设置为常用"];
			protected function buttonbar1_itemClickHandler(event:ItemClickEvent):void
			{
				switch(event.index)
				{
					case 0:
					{
						var items:Array = datagrid_file_list_view.selectedItems;
						for (var i:int = 0; i < items.length; i++) 
						{
							var gridfile:GridFile = items[i] as GridFile;
							try {
								gridfile.file.deleteFile();
							} catch (e:Error) {
							} 
						}
						datagrid_file_list_view.dataProvider = fileService.getDateFileList(null);					
						
						break;
					}
					
					case 1:
					{
						var items:Array = datagrid_file_list_view.selectedItems;
						for (var i:int = 0; i < items.length; i++) 
						{
							var gridfile:GridFile = items[i] as GridFile;
							try {
								gridfile.file.copyTo(new File(fileService.todayPath + "/" + gridfile.name));
								//gridfile.file.deleteFile();
							} catch (e:Error) {
							} 
						}
						datagrid_file_list_view.dataProvider = fileService.getDateFileList(null);					
						
						break;
					}
						
					case 2:
					{
						var items:Array = datagrid_file_list_view.selectedItems;
						for (var i:int = 0; i < items.length; i++) 
						{
							var gridfile:GridFile = items[i] as GridFile;
							try {
								gridfile.file.moveTo(new File(fileService.usefullFolder + "/" + gridfile.name));
								//gridfile.file.deleteFile();
							} catch (e:Error) {
							} 
						}
						datagrid_file_list_view.dataProvider = fileService.getDateFileList(null);					
						
						break;
					}
						
						
					default:
					{
						break;
					}
				}
				
				// TODO Auto-generated method stub
			}

			
			var isCreateing:Boolean = true;
			var isEditing:Boolean = false;
			//创建便签的按钮操作
			protected function button4_clickHandler(event:MouseEvent):void
			{
				vbox_rte.left = 120;
				vbox_rte.width = navcontent_notes.width-120;
				rte.htmlText = "";
				rte_title.text = "";
				notesService.currentEditing = null;
				isCreateing = true;
				isEditing = true;
			}

			//便签表格的单击事件：保存
			protected function datagrid_notes_list_clickHandler(event:MouseEvent):void
			{
				if (isEditing) {
					isEditing = false;
					if (rte_title.text=="" && rte.htmlText=="") return;				
					
					if(isCreateing) {
						rte_title.text = notesService.createNotes(rte_title.text, rte.htmlText);//fileService.createNotes(rte_title.text, rte.htmlText);
						isCreateing = false;
					} else {
						notesService.saveNotes(rte_title.text, rte.htmlText);
					}
					datagrid_notes_list.dataProvider = notesService.getNotesList();
				} else { //将右侧预览的内容修改
					var item:Object = datagrid_notes_list.selectedItem;
					if (item!=null) {
						rte_title.text = item["title"];
						var text:String = notesService.editNotes(item["title"]);
						rte.htmlText = text;
						
					}
				}
				//刷新dataprovider
				//var target:Object = event.target;
				/*
				var i:int = datagrid_notes_list.selectedIndex;
				
				if (i>(datagrid_notes_list.dataProvider as ArrayCollection).length) {
					return;
				}
				
				if (datagrid_notes_list.dataProvider.getItemAt(i)!=null) {
					var item:Object = datagrid_notes_list.dataProvider.getItemAt(i) as Object;
					isCreateing = false;
					
				}
				*/
				
			}

			//点击预览栏，对内容进行编辑
			protected function vbox_rte_clickHandler(event:MouseEvent):void
			{
				if (isEditing) {
					return;
				}
				isEditing = true;
				if (rte.htmlText=="" && rte_title.text=="") {
					isCreateing = true;
					notesService.currentEditing = null;
				} else {
					isCreateing = false;
				}
			}


			protected function button5_clickHandler(event:MouseEvent):void
			{
				var selected:Array = datagrid_notes_list.selectedItems;
				for each (var item:Object in selected) {
					notesService.removeNotes(item["title"]);
					rte.htmlText = "";
					rte_title.text = "";
					isEditing = false;
					isCreateing = false;
				}
				datagrid_notes_list.dataProvider = notesService.getNotesList();
			}
			
			protected function togglebutton1_clickHandler(event:MouseEvent):void
			{
				if (toggleEditNote.selected) {
					this.currentState="show";
					vbox_rte.left = 120;
					vbox_rte.width = navcontent_notes.width-120;
				}else {
					this.currentState="hide";
					vbox_rte.left = 600;
					vbox_rte.width = navcontent_notes.width-600;
				}
				// TODO Auto-generated method stub
			}


			protected function button6_clickHandler(event:MouseEvent):void
			{
				if (rte_title.text=="" || rte_notes_newTag.text =="") return;
				serviceRegistry.taggingService.addTag("notes",rte_title.text, rte_notes_newTag.text);
			}

		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<fx:XML id="data_ltree" xmlns="http://www.g-qu.net/powspace/" >
			<node label="便笺">
				<node label="便笺">
					<node label="列表"></node>
					<node label="分类"></node>
				</node>
				<node label="时间">
					<node label="待办"></node>
					<node label="提醒"></node>
					<node label="动态"></node>
				</node>
				<node label="文件">
					<node label="每日文件"></node>
					<node label="常用文件"></node>
				</node>
			</node>
			
		</fx:XML>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:states> 
		<s:State name="show"/>    
		<s:State name="hide"/> 
	</s:states> 
	
	<mx:MenuBar x="0" y="0" height="30" width="100%" dataProvider="{xmm}"   labelField="@label"  showRoot="false" iconField="">
	</mx:MenuBar>
	<s:HGroup x="0" y="30" width="100%" height="100%">
		
		
		<mx:HDividedBox width="100%" height="100%" color="0x323232">
			<mx:Tree id="myTree" width="200" height="100%" labelField="@label"
					 showRoot="false" dataProvider="{data_ltree}"  click="myTree_clickHandler(event)"/>
				
				
				<mx:ViewStack id="viewstack" borderStyle="solid" width="100%" height="100%" color="0x323232">
					<s:NavigatorContent id="search" label="Search" backgroundColor="0xDCDCDC" width="100%" height="100%" fontWeight="bold">
						
						<s:Label text="helloa">
							
						</s:Label>
					</s:NavigatorContent>
					
					
					
					<!--便签内容-->
					<s:NavigatorContent id="navcontent_notes"  width="100%" height="100%">
						<s:VGroup width="100%" height="100%">
							<s:HGroup>
								<s:Button label="创建" click="button4_clickHandler(event)"/> 
								<s:Button label="删除" click="button5_clickHandler(event)"/>
							</s:HGroup>								
								
							<mx:DataGrid id="datagrid_notes_list" width="600" height="100%"  
								    allowMultipleSelection="true"
									dataProvider="{notesService.getNotesList()}"
									click="datagrid_notes_list_clickHandler(event)">
								<mx:columns>
									<mx:DataGridColumn headerText="标题" dataField="title"/>	
									<mx:DataGridColumn headerText="修改时间" dataField="modified"/>
								</mx:columns>
							</mx:DataGrid>	
						</s:VGroup>
						<mx:VBox left="600" width="{navcontent_notes.width-600}" height="100%" id="vbox_rte" click="vbox_rte_clickHandler(event)">
							<s:HGroup width="95%" >
								<s:ToggleButton id="toggleEditNote" width="20" click="togglebutton1_clickHandler(event)" label.hide="&lt;" label.show="&gt;">
									
								</s:ToggleButton>
								<mx:TextInput id="rte_title" width="400"> </mx:TextInput>
							</s:HGroup>
							<s:HGroup>
								<s:TextInput id="rte_notes_newTag">
								</s:TextInput>
								<s:Button click="button6_clickHandler(event)">
								</s:Button>
							</s:HGroup>
							<mx:RichTextEditor id="rte" width="100%" height="100%" headerHeight="2"
											   borderVisible="false"/>
						</mx:VBox>
					</s:NavigatorContent>
					
					
					<!--文件管理 VBOX-->
					<s:NavigatorContent id="navcontent_everyday_file" backgroundColor="0xDCDCDC" width="100%" height="100%">
						<mx:VBox width="100%" height="100%">
						<!--日期导航-->
						<s:HGroup verticalAlign="middle">
							<s:Button width="34" label="&lt;" click="button1_clickHandler(event)"/>
							<mx:HorizontalList   id="list_days" 
								width="707" height="25"
								click="list_days_clickHandler(event)" horizontalScrollPolicy="off"
								initialize="list_days_initializeHandler(event)"
								dataProvider="{fileService.getDays()}">
							</mx:HorizontalList>
							<s:Button width="43" label="&gt;" click="button2_clickHandler(event)"/>
						</s:HGroup>
							
						<!--文件列表-->
							
						<!--文件列表的操作栏-->
						<mx:ButtonBar horizontalGap="5" itemClick="buttonbar1_itemClickHandler(event)" dataProvider="{fileOperations}">
							
						</mx:ButtonBar>
							
						<mx:DataGrid id="datagrid_file_list_view" width="100%" height="100%" 
									 doubleClickEnabled="true" allowMultipleSelection="true"
									 doubleClick="datagrid_file_list_view_doubleClickHandler(event)">
							<mx:columns>
								<mx:DataGridColumn headerText="" width="64">
									<mx:itemRenderer>
										<fx:Component>
											<mx:Image source="{data.iconpath}" width="64" height="64">
											</mx:Image>
										</fx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn >
								<mx:DataGridColumn headerText="名称" dataField="name"/>	
								<mx:DataGridColumn headerText="修改时间" dataField="modified"/>
								<mx:DataGridColumn dataField="size" sortable="true" resizable="true"/>
							</mx:columns>
						</mx:DataGrid>		
						
						<!--目录设置-->
						<s:HGroup verticalAlign="middle">
							<s:Label>工作根目录</s:Label><s:TextInput text="{fileService.getRootFolder()}" x="35" y="10" width="428" id="cfg_basePath"/> 
							<s:Button label="设置" click="textinput1_clickHandler(event)"/>
							<s:Button label="组织" click="button3_clickHandler(event)"/>
							
							<!--<s:Button label="按日期组织文件"  click="button1_clickHandler(event)"/>-->
							<s:Label color="red" id="label_filestatus" text="工作目录的文件会自动按日期组织起来"></s:Label>
						</s:HGroup>
						</mx:VBox>
					</s:NavigatorContent>
					
					
					
					<!--常用文件管理 VBOX-->
					<s:NavigatorContent id="navcontent_useful_file" backgroundColor="0xDCDCDC" width="100%" height="100%" >
						<mx:VBox width="100%" height="100%">
							<!--文件列表-->
							<mx:DataGrid id="datagrid_useful_file_list_view" width="100%" height="100%" 
										 doubleClickEnabled="true" allowMultipleSelection="true"
										 doubleClick="datagrid_useful_file_list_view_doubleClickHandler(event)"
										 dataProvider="{fileService.getUsefullFileList()}">
								<mx:columns>
									<mx:DataGridColumn headerText="" width="64">
										<mx:itemRenderer>
											<fx:Component>
												<mx:Image source="{data.iconpath}" width="64" height="64">
												</mx:Image>
											</fx:Component>
										</mx:itemRenderer>
									</mx:DataGridColumn >
									<mx:DataGridColumn headerText="名称" dataField="name"/>	
									<mx:DataGridColumn headerText="修改时间" dataField="modified"/>
									<mx:DataGridColumn dataField="size" sortable="true" resizable="true"/>
								</mx:columns>
							</mx:DataGrid>		
						</mx:VBox>
					</s:NavigatorContent>
					
					
				</mx:ViewStack>
				
			
		</mx:HDividedBox>
		
	</s:HGroup>
	
	
	
	
</s:WindowedApplication>
