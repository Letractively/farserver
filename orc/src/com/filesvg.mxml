<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="1024" height="700" >
	<fx:Script>
		<![CDATA[
			import com.orc.service.ServiceRegistry;
			import com.orc.service.file.FileEvent;
			import com.orc.service.file.FileItemDisplayGroup;
			import com.orc.service.file.FileService;
			import com.orc.service.file.GridFile;
			import com.orc.utils.FormatUtils;
			
			import mx.collections.ArrayList;
			import mx.collections.HierarchicalData;
			import mx.containers.Panel;
			import mx.controls.ColorPicker;
			import mx.core.UIComponent;
			import mx.core.UITextField;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColor;
			
			import spark.components.BorderContainer;
			import spark.components.Label;
			import spark.effects.interpolation.RGBInterpolator;
			import spark.primitives.Rect;
			import spark.primitives.supportClasses.FilledElement;
			
			public function init():void {
				ServiceRegistry.fileService.addEventDispatcher(this);
				this.addEventListener(FileEvent.MODIFY, onChange);
				loadMore();
			}
			
			
			
			protected function linkbutton3_clickHandler(event:MouseEvent):void
			{
				var sbe:SlideBackEvent = new SlideBackEvent();
				sbe.obj = this;
				this.dispatchEvent(sbe);
			}
			
			var summaryies:Object;
		
			protected function tree1_clickHandler(event:MouseEvent):void
			{
				var target:Object = event.target;
				if (target is UITextField) {
					var text:UITextField = target as UITextField;
					//datagrid_file_list_view.dataProvider = serviceRegistry.fileService.getByTypeCategory(typeTree.selectedItem["type"]);
				}
			}
			
			
			var todayVG:VGroup = null;  //表示今天的组  拖入文件时需要将其增加到组中
			public function drawDate(label:String, fileList:ArrayList) {
				
				if (label!=FileService.LABEL_TODAY && fileList.length==0) {
					return;
				}
				
				var vg:VGroup = new VGroup();
				
				if (todayVG==null) {  
					todayVG = vg; 
				}
				
				vg.gap = 0;
				vg.width = 1010;
				
				var gTitle:BorderContainer = new BorderContainer();
				gTitle.percentWidth=100;
				gTitle.height = 25;
				gTitle.setStyle("backgroundColor","#E0E0E0");
				gTitle.setStyle("borderColor","#cedbef");
				var titleLabel:Label = new Label();
				titleLabel.x = 20;
				titleLabel.y = 5;
				titleLabel.text = label;
				gTitle.addElement(titleLabel);
				vg.addElement(gTitle);
				
				for (var i:int = 0; i < fileList.length; i++) 
				{
					var fid : FileItemDisplayGroup = new FileItemDisplayGroup();
					fid.gridfile = fileList.source[i] as GridFile;
					//fid.y = j * 48;
					vg.addElement(fid);
				}
				
				vg_file_bydate.addElement(vg);
				//vg.height = 80;
			}
			
			public function addFile(gf:GridFile) {
				if(todayVG!=null) {
					var fid : FileItemDisplayGroup = new FileItemDisplayGroup();
					fid.gridfile = gf;
					todayVG.addElementAt(fid,1);
				}
			}
			
			
			
			private var loadedDateIndex:int = 0;
			public static const ITEMS_PER_PAGE:int = 15;
			public function loadMore():void {
				var days:Array = ServiceRegistry.fileService.getDays();
				
				var loaded:int = 0;
				
				while (loadedDateIndex<days.length && loaded<ITEMS_PER_PAGE) {
					var fileList:ArrayList = ServiceRegistry.fileService.getDateFileList(days[loadedDateIndex].path);
					
					drawDate(days[loadedDateIndex].label, fileList);
					loadedDateIndex ++;
					loaded += fileList.length;
				}
			}
			
			
			
			protected function onChange(event:Event):void
			{
				var fe:FileEvent = event as FileEvent;
				var date:Date = new Date();
								
				addFile(fe.file);
			}
			
			protected function click_showMore(event:MouseEvent):void
			{
				loadMore();
			}
			
			protected function click_addFile(event:MouseEvent):void
			{
				var file = new File();
				file.addEventListener(FileListEvent.SELECT_MULTIPLE, function (event:FileListEvent):void {
					var files:Array = event.files;
					for (var i:int = 0; i < files.length; i++) 
					{
						ServiceRegistry.fileService.addFile(files[i]);
					}
				});
				file.browseForOpenMultiple("选择文件...");
			}
			
		]]>
	</fx:Script>

	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		Scroller {
			downArrowUpSkin: Embed(source="/assets/downArrow.png");
			downArrowOverSkin: Embed(source="/assets/downArrow.png");
			downArrowDownSkin: Embed(source="/assets/downArrow.png");
			upArrowUpSkin: Embed(source="/assets/upArrow.png");
			upArrowOverSkin: Embed(source="/assets/upArrow.png");
			upArrowDownSkin: Embed(source="/assets/upArrow.png");
			thumbDownSkin: 
				Embed(source="/assets/thumb.png",
				scaleGridLeft="7", scaleGridTop="5", 
				scaleGridRight="8", scaleGridBottom="7");
			
			thumbUpSkin: 
				Embed(source="/assets/thumb.png",
				scaleGridLeft="7", scaleGridTop="5", 
				scaleGridRight="8", scaleGridBottom="7");
			
			thumbOverSkin: 
				Embed(source="/assets/thumb.png",
				scaleGridLeft="7", scaleGridTop="5", 
				scaleGridRight="8", scaleGridBottom="7");
			
			trackSkin: 
				Embed(source="/assets/scrolltrack.png",
				scaleGridLeft="7", scaleGridTop="4", 
				scaleGridRight="8", scaleGridBottom="6" );   
		}
	</fx:Style>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<s:VGroup x="0" y="0" width="1010" height="665" gap="0">
		<s:Scroller verticalScrollPolicy="auto" horizontalScrollPolicy="off" height="665">
			<s:VGroup id="vg_file_bydate" height="665" width="1000" gap="0">
			</s:VGroup>
		</s:Scroller>
	</s:VGroup>
	
	<s:BorderContainer x="0" y="671" width="1016" height="25" backgroundColor="#E0E0E0"
					   borderColor="#CEDBEF" dropShadowVisible="true">
		<mx:LinkButton x="3" y="1" label="增加文件" click="click_addFile(event)"/>
		
		<mx:LinkButton x="941" y="0" label="显示更多." click="click_showMore(event)"/>
			
	</s:BorderContainer>

</s:Group>
